<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="FB_Cell" Id="{f3ca1779-66fa-4c77-b6d1-6431bebeadb8}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Cell
VAR_INPUT
	Config : ST_Configuration;
    HMItoPLC : st_HMItoPLC;
END_VAR
VAR_OUTPUT
	bBusy : BOOL;
    PLCtoHMI : st_PLCtoHMI;
END_VAR
VAR
	topology : FB_Topology;
	HydrualicsSystem : FB_HydrualicSystem;

    pretendFullFledgedScheduler : TON := (pt:=T#8S);
    
    // Robot
    fbFanucRobot : FB_Fanuc;
    fbKukaRobot_krc2 : FB_Kuka_KRC2;
    fbKukaRobot_krc4 : FB_Kuka_KRC4;
    fbRobotSim : FB_Robot_Simulator;
    iRobot : I_Robot;
    
    cellState : eCellState;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[HandleInput();
VariantControl();

IF cellState <> eCellState.eCellState_Error THEN
	// cell logic
	IF NOT bBusy THEN
        IF HMItoPLC.cell.bGoToAuto THEN
			cellState := eCellState.eCellState_Automatic;
            PLCtoHMI.cell.bGoToAuto := NOT HMItoPLC.cell.bGoToAuto;
        ELSIF HMItoPLC.cell.bGoToManual THEN
			cellState := ecellstate.eCellState_Manual;
            PLCtoHMI.cell.bGoToManual := NOT HMItoPLC.cell.bGoToManual;
		END_IF
	END_IF

	// execute state methods
	IF cellState = eCellState.eCellState_Automatic THEN
		ExecuteAuto();
	ELSIF cellState = ecellstate.eCellState_Manual THEN
		ExecuteManual();
	END_IF
ELSE
    IF HMItoPLC.cell.bReset THEN
		ExecuteReset();
	END_IF
END_IF


pretendFullFledgedScheduler();
HydrualicsSystem();
fbFanucRobot();
fbKukaRobot_krc2();
fbKukaRobot_krc4();
fbRobotSim();

HandleOutput();]]></ST>
    </Implementation>
    <Method Name="ExecuteAuto" Id="{e5ba4b49-d2b9-4318-8b2b-4d04fba2cdf6}">
      <Declaration><![CDATA[METHOD ExecuteAuto : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bBusy (*AND cellRobotManager.taskListEmpty()?*) THEN
    bBusy := TRUE;
END_IF

IF bBusy THEN

    IF cellState <> eCellState_Error THEN
        HydrualicsSystem.start();
    END_IF

    // start robot as soon as hydrualic system is ready
    IF HydrualicsSystem.getState() = eState_Running THEN
        IF pretendFullFledgedScheduler.Q THEN
            IF iRobot.getState() = eState_Idle THEN
                iRobot.start();
            END_IF
            pretendFullFledgedScheduler(IN := FALSE);
        ELSE
            // throw error
        END_IF
    END_IF

    IF iRobot.getState() = eState_Complete THEN
        IF NOT Config.bIsSimulator THEN
            bBusy := FALSE;
        END_IF
    ELSIF (iRobot.getState() = eState_Idle) AND HMItoPLC.cell.bGoToManual THEN
        // allow robot to complete current task and then go to manual
        bBusy := FALSE;
    ELSIF iRobot.getState() = eState_Error THEN
        // Throw cell into error state if there's a robot error
        cellState := eCellState_Error;
        bBusy := FALSE;
    END_IF
    
    IF HydrualicsSystem.getState() = eState_Error THEN
        cellState := eCellState_Error;
        iRobot.abort();
        bBusy := FALSE;
	END_IF
ELSE
    iRobot.stop();
    HydrualicsSystem.stop();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecuteManual" Id="{ceccce4a-9467-49ea-acc0-2584892b68db}">
      <Declaration><![CDATA[METHOD ExecuteManual : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// not implemented

IF cellState = eCellState_Error THEN
    iRobot.hold();
END_IF

IF HydrualicsSystem.getState() = eState_Error THEN
    cellState := eCellState_Error;
END_IF

IF iRobot.getState() = eState_Error THEN
    cellState := eCellState_Error;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecuteReset" Id="{25ce7656-6a78-42a7-91c9-ada9e0257f60}">
      <Declaration><![CDATA[METHOD ExecuteReset : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[

// reset alarms for cell and every subsystem and go to manual
cellState := eCellState_Manual;
iRobot.reset();
HydrualicsSystem.reset();]]></ST>
      </Implementation>
    </Method>
    <Method Name="HandleInput" Id="{ecff1509-1777-43a9-9504-4860e759c744}">
      <Declaration><![CDATA[METHOD HandleInput : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[topology.HandleInputs();

pretendFullFledgedScheduler.IN := TRUE;

fbKukaRobot_krc4.HardwareInputs.fault := topology.IOtoPLC.robot.fault;
fbRobotSim.HardwareInputs.fault := topology.IOtoPLC.robot.fault;
fbRobotSim.simCellState := cellState;
fbRobotSim.simHydroState := HydrualicsSystem.getState();


HydrualicsSystem.PressureSensor_input.value := topology.IOtoPLC.pressureTransducer.value;
HydrualicsSystem.bIsSimulator := Config.bIsSimulator;
HydrualicsSystem.bHasPump := Config.bHasPump;
HydrualicsSystem.sTypeOfPump := Config.sPumpType;
HydrualicsSystem.bHasPressureSensor := Config.bHasPressureSensor;
HydrualicsSystem.sTypeOfPressureSensor := Config.sPressureSensorType;]]></ST>
      </Implementation>
    </Method>
    <Method Name="HandleOutput" Id="{b493ef1d-8946-4240-9236-92b6c79f5d10}">
      <Declaration><![CDATA[METHOD HandleOutput : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[topology.PLCtoIO.robot.fault := fbKukaRobot_krc4.HardwareOutputs.fault OR fbRobotSim.HardwareOutputs.fault;

topology.PLCtoIO.hydroPump.On := HydrualicsSystem.hydrualicPump_output.On;

// send data to HMI struct
PLCtoHMI.cell.state := cellState;
PLCtoHMI.robot.state := iRobot.getState();
PLCtoHMI.hydrualics.state := HydrualicsSystem.PLCtoHMI.state;
PLCtoHMI.hydrualics.pump.state := HydrualicsSystem.PLCtoHMI.pump.state;
PLCtoHMI.hydrualics.psiSensor.value := HydrualicsSystem.PLCtoHMI.psiSensor.value;

PLCtoHMI.cell.bReset := HMItoPLC.cell.bReset;

topology.HandleOutputs();]]></ST>
      </Implementation>
    </Method>
    <Method Name="VariantControl" Id="{5b1cd0b2-a21f-4420-b0c5-032f49d6011c}">
      <Declaration><![CDATA[METHOD VariantControl : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Config.bIsSimulator THEN
    iRobot := fbRobotSim;
ELSE
    // choose normal type according to MachineConfig.json file

    iRobot := fbKukaRobot_krc4;
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Cell">
      <LineId Id="323" Count="34" />
      <LineId Id="113" Count="0" />
    </LineIds>
    <LineIds Name="FB_Cell.ExecuteAuto">
      <LineId Id="14" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="103" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="88" Count="1" />
      <LineId Id="73" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="96" Count="1" />
      <LineId Id="24" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="57" Count="2" />
      <LineId Id="68" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="62" Count="2" />
      <LineId Id="22" Count="0" />
    </LineIds>
    <LineIds Name="FB_Cell.ExecuteManual">
      <LineId Id="10" Count="0" />
      <LineId Id="16" Count="1" />
      <LineId Id="19" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="22" Count="1" />
      <LineId Id="25" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="26" Count="1" />
    </LineIds>
    <LineIds Name="FB_Cell.ExecuteReset">
      <LineId Id="5" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="11" Count="2" />
    </LineIds>
    <LineIds Name="FB_Cell.HandleInput">
      <LineId Id="5" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="17" Count="1" />
      <LineId Id="26" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="2" />
      <LineId Id="25" Count="0" />
      <LineId Id="24" Count="0" />
    </LineIds>
    <LineIds Name="FB_Cell.HandleOutput">
      <LineId Id="22" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="29" Count="4" />
      <LineId Id="35" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="16" Count="0" />
    </LineIds>
    <LineIds Name="FB_Cell.VariantControl">
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>